{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"React Error Explained","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#react-error","title":"React Error","text":"<ul> <li>React error explained about errors.</li> </ul>"},{"location":"Components/","title":"Components  Error","text":""},{"location":"Components/#syntax-errors","title":"Syntax Errors","text":"<ul> <li>Into this section we will look into common react errors which occurs when working with react components mostly  on beginner concepts.</li> </ul>"},{"location":"Components/#the-use-of-classname-instead-of-class","title":"The use of className instead of class","text":"<ul> <li>This error occurs in react because when using react with css or bootstrap to add an attribute for class it should be <code>className</code> instead of a class because class in JavaScript is a reserved keyword so it should not be used for other purpose instead of it's intended purpose.</li> </ul> <pre><code>// bad practice\nconst Home = () =&gt; {\n    return (\n        &lt;div class=\"text-center m-2\"&gt;\n            &lt;h2&gt;React Is Awesome&lt;/h2&gt;\n        &lt;/div&gt;\n    );\n}\n\nexport default Home;\n\n// good practice\n\nconst Home = () =&gt; {\n    return (\n        &lt;div className=\"text-center m-2\"&gt;\n            &lt;h2&gt;React Is Awesome&lt;/h2&gt;\n        &lt;/div&gt;\n    );\n}\n\nexport default Home;\n</code></pre> <ul> <li>Sometimes it may not bring error into your project but it will show warning so possible solutions to that error is by using <code>className</code> instead of <code>class</code> attribute.</li> </ul>"},{"location":"Components/#forgetting-to-close-tags-missing-commas-or-semicolons","title":"forgetting to close tags, missing commas, or semicolons.","text":"<ul> <li>This is the common error which occurs when working with react project,due to this errors can lead to syntax error compiler fails to compiling our code due to errors which have occured into a project.Let's some of the common errrs which occurs when working into it and see possible soultions into it.</li> </ul> <pre><code>// closing tag error\nconst Home = () =&gt; {\n    return (\n        &lt;div className=\"text-center m-2\"&gt;\n            &lt;h2&gt;React Is Awesome&lt;h2&gt;\n        &lt;/div&gt;\n    );\n}\n\nexport default Home;\n\n// Line 5:14:  Parsing error: Unterminated JSX contents. (5:14)\n</code></pre> <ul> <li>From the above the error which has occured is called parsing error and is telling that Unterminated JSX contents in a line 5 <code>&lt;h2&gt;React Is Awesome&lt;h2&gt;</code> possible solutions into it is to add a closing tag into the <code>h2</code> tag.Also before you start solving that error you should read the type of error and the line in which an error has occured also and description of an error.</li> </ul>"},{"location":"Components/#missing-comma","title":"Missing Comma","text":"<ul> <li>This type of error occurs when components are missing the comma for terminating a statement into a react project and can happen when creating stateless functional components in react,That's why is do advise to use react code snippets extension for VS Code which provides a boilerplate for creating react functional components, let's look into how a comma can lead to errors into our program.</li> </ul>"},{"location":"Components/#props-errors","title":"Props errors","text":"<ul> <li>When passing data from one components to another component using prop there are some sort of errors can happen due to passing wrong value into a prop, passing wrong components into components.</li> </ul>"},{"location":"Components/#unused-variable","title":"Unused Variable","text":"<ul> <li>This type of error occurs when you have created a variable or any other object into your components but you have not used it so this reads into the <code>unused variable warning</code> into your project.Example:</li> </ul> <pre><code>  const [eventName, setEventName] = useState(\"\");\n</code></pre> <ul> <li>From the above example we have created a state variable for eventName but we have nto used into the project so what leads is the unused variable warning.There are many tools to deal with this error but eaxmaple of tool to use is the linter,Linter scans and checks for unsused variable into your project which have <code>.jsx</code> or <code>.js</code> extension into your project to install just run the following command into your terminal.</li> </ul> <pre><code># install eslint\nnpm init @eslint/config@latest\n\n# install linter\n</code></pre>"},{"location":"Rendering/","title":"Index","text":""},{"location":"Rendering/#rendering-erros","title":"Rendering Erros","text":""},{"location":"Rendering/#module-not-found","title":"Module not found:","text":"<ul> <li>This type of errors happens when you are working with files into your project can be occuring when you have a file <code>Create.js</code> and you have imported into the <code>App.js</code> root component of your project but it comes that you have moved <code>Create.js</code> into another folder may be called <code>Form</code> which contains the list of forms into you project.</li> </ul> <pre><code>ERROR in ./src/App.js 9:0-30\nModule not found: Error: Can't resolve './Create' in 'C:\\Users\\Njox\\Desktop\\reactjs\\fumbakasa-blog\\src'\n\nwebpack compiled with 1 error and 1 warning\n</code></pre> <ul> <li>Another cause of this problem is caused by deletion of your project file or folder of your project.</li> </ul> <p>Soulution</p> <ul> <li> <p>Update file path for your project inorder to solve this error.</p> </li> <li> <p>Crosscheck to see if the file you have imported exist into your project or not.</p> </li> <li> <p>Navigate into the app root component to resolve that error.</p> </li> </ul>"},{"location":"Routing/","title":"Index","text":""},{"location":"Routing/#page-not-found","title":"Page Not Found","text":"<ul> <li> <p>This type of error occurs into your project when a user searchs for page that has not been registered into the router path of the project.Example when a user is into the project and finds a program hving this path <code>\\results</code> but your project doesn't have that path.</p> </li> <li> <p>To solve this problem it depends but the first thing you have to think if that path is needed into your project or not if is not needed then you need to add the not found page but if it's needed you have to add corect path for the project.Example of Not found page and route.</p> </li> </ul> <pre><code>import {\n  Route,\n  RouterProvider,\n  createBrowserRouter,\n  createRoutesFromElements,\n} from \"react-router-dom\";\n\n// layout\nimport RootLayout from \"./layout/RootLayout\";\nimport EventLayout from \"./layout/EventsLayout\";\n\n// pages\nimport NotFound from \"./pages/NotFound\";\nimport Home, { eventLoader } from \"./home/Home\";\nimport EventDetails, { eventLoaderDetails } from \"./events/EventDetails\";\nimport Event from \"./events/Events\";\nimport Create from \"./auth/Create\";\nimport Dashboard from \"./pages/Dashboard\";\nimport Profile from \"./user/Profile\";\nimport EventsError from \"./events/EventsError\";\n\nconst router = createBrowserRouter(\n  createRoutesFromElements(\n    &lt;Route path=\"/\" element={&lt;RootLayout /&gt;}&gt;\n      &lt;Route\n        index\n        loader={eventLoader}\n        errorElement={&lt;EventsError /&gt;}\n        element={&lt;Home /&gt;}\n      &gt;&lt;/Route&gt;\n      &lt;Route path=\"events\" element={&lt;EventLayout /&gt;}&gt;\n        &lt;Route index loader={eventLoader} element={&lt;Event /&gt;}&gt;&lt;/Route&gt;\n        &lt;Route\n          path=\":id\"\n          loader={eventLoaderDetails}\n          errorElement={&lt;EventsError /&gt;}\n          element={&lt;EventDetails /&gt;}\n        &gt;&lt;/Route&gt;\n      &lt;/Route&gt;\n      &lt;Route path=\"create\" element={&lt;Create /&gt;}&gt;&lt;/Route&gt;\n      &lt;Route\n        path=\"dashboard\"\n        loader={eventLoader}\n        element={&lt;Dashboard /&gt;}\n      &gt;&lt;/Route&gt;\n      &lt;Route path=\"profile\" element={&lt;Profile /&gt;}&gt;&lt;/Route&gt;\n      &lt;Route path=\"*\" element={&lt;NotFound /&gt;}&gt;&lt;/Route&gt;\n    &lt;/Route&gt;\n  )\n);\nexport default function App() {\n  return (\n    &lt;div&gt;\n      &lt;RouterProvider router={router}&gt;&lt;/RouterProvider&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre> <ul> <li>Example of not found page.</li> </ul> <pre><code>import { NavLink } from \"react-router-dom\";\n\nexport default function NotFound() {\n  return (\n    &lt;div className=\"p-8\"&gt;\n      &lt;h1 className=\"font-bold\"&gt;NotFound&lt;/h1&gt;\n      &lt;p&gt;\n        Page Not Found return to{\" \"}\n        &lt;NavLink to=\"/\" className=\"font-bold hover:underline text-blue\"&gt;\n          Homepage\n        &lt;/NavLink&gt;\n      &lt;/p&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre>"},{"location":"Routing/#json-parse-tools-limit","title":"JSON parse tools limit","text":"<ul> <li>Sometimes a person can be searching a file in json format which is locally but also a file which is from API endpoints.Let's say example you have event page where you display the list of events but there is a link to events details and events are linked by an id such that from 1 and so on, so what happens here is that when a uyser tries to request event which is out of range using this path <code>http://localhost:5173/events/122</code> the event in which a user finds doesn't exits so what happens a user gets this error.</li> </ul> <pre><code>Unhandled Thrown Error!\nJSON.parse: unexpected character at line 1 column 1 of the JSON data\n\ud83d\udcbf Hey developer \ud83d\udc4b\n\nYou can provide a way better UX than this when your app throws errors by providing your own errorElement props on &lt;Route&gt;.\n</code></pre> <ul> <li>The server is trying to fetch for a data for an event which does not exist so what is needed is here is adding a way to throw this error when a response is not ok when fetching data.</li> </ul> <pre><code>export const eventLoader = async () =&gt; {\n  const response = await fetch(\"http://localhost:3003/events\");\n\n  //   handling response\n  if (!response.ok) {\n    throw Error(\"Could not fetch event\");\n  }\n  return response.json();\n};\n</code></pre> <ul> <li>After adding that what follows is creating a page to throw an error</li> </ul> <pre><code># create event file\ntouch eventError.jsx\n</code></pre> <pre><code>import { NavLink, useRouteError } from \"react-router-dom\";\n\nexport default function EventsError() {\n// use route error for handling json limit error    \n  const error = useRouteError();\n  return (\n    &lt;div className=\"p-8\"&gt;\n      &lt;h1 className=\"font-bold\"&gt;Error&lt;/h1&gt;\n      &lt;p&gt;{error.message}&lt;/p&gt;\n      &lt;p&gt;The Event You are Lokking For Was Not Found&lt;/p&gt;\n      &lt;NavLink to=\"/\" className=\"text-blue-700 underline font-semibold\"&gt;\n        Back to Homepage\n      &lt;/NavLink&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre> <ul> <li>add a prop errorElement into the route in which an error has occured.</li> </ul> <pre><code>&lt;Route\n  path=\":id\"\n  loader={eventLoaderDetails}\n  errorElement={&lt;EventsError /&gt;}\n  element={&lt;EventDetails /&gt;}\n&gt;&lt;/Route&gt;\n</code></pre>"},{"location":"State/","title":"React State Errors","text":"<ul> <li>Welcome into state section, in this section we will explore examples of errors which can happen when working with states in react, we will explore hook used react which includes from the beginner level to intermediate.Before you dive into this section I think it will be best if you know the rules of each state which you are using into your component.</li> </ul>"},{"location":"State/#usestate","title":"useState","text":"- Into this section `useState` hook we will explore what is useState, what are the rules of react useState, when to use it and possible solution to react useState errors,   ## use State Rules  - **Call hooks at the top level**.Don't call hooks inside the condition or function, or nested functions it's a bad practice.   <pre><code>import { useState } from \"react\";\n</code></pre>    - **Use Hooks in the same order**.If you have started to set the state of a certain object then it should start before another component into your project,**Why?** Some of the code in your project can depend on the first code to be executed then next but if you have changed then it will result into an error.Example:   <pre><code>\n</code></pre> Here are some of the erros you can encounter when working with react useState  1: **Parsing error**: This occurs when you created a state for a certain object may be blog title but you have redeclared into your program example:   <pre><code>const [blogTitle, setBlogTitle] = useState(\"\");\nconst [blogTitle, setBlogTitle] = useState(\"\");\n</code></pre>    **Solution** : - Remove state for variables which has been redeclared inorder to follow best code practices such as DRY principle(Don't Repeat Yourself):Remove duplicates."},{"location":"State/#useeffect","title":"useEffect","text":""},{"location":"State/#usefetch","title":"useFetch","text":""},{"location":"State/#useref","title":"useRef","text":""},{"location":"State/#useparms","title":"useParms","text":""},{"location":"State/#reference","title":"Reference","text":"<ul> <li>useState React</li> </ul>"},{"location":"forms/","title":"Beginner","text":""},{"location":"forms/#forms","title":"Forms","text":"<ul> <li>This type of error occurs when you are working with react forms and other types of projects which are related to forms in react,From the below error it shows that you have an error called runtime error and description is has no properties this shows that may be you have created an object in your application but you have not initialized the properties of your object.</li> </ul> <pre><code>// error\nUncaught runtime errors:\nERROR\nundefined has no properties\n</code></pre> <pre><code>// code sample\n    this.state = {\n\n    }\n</code></pre>"},{"location":"general/","title":"General","text":"<ul> <li> <p>undefined error</p> </li> <li> <p>Welcome to this section where I will be documenting about common errors which are general and can happen into beginner concepts, intermediate to advanced concepts in react.</p> </li> </ul>"},{"location":"general/#undefined-error","title":"undefined error","text":"<ul> <li>This type of error occurs when you have inserted a certain function or any dynamic value into your component but you have not create a variable for it.Example: You have a button and you have included the <code>onClick</code> attribute in which when a user clicks into a button then deletes a post but You have not defined a function for it.</li> </ul> <pre><code>&lt;button oncLick=\"{handleDelete}\"&gt;Delete&lt;/button&gt;\n</code></pre> <ul> <li>To solve this error depends on requirement of your project,but below are possible solutions.</li> </ul>   Before you do all of that identify your error then using ctrl + f into visual studio code and search for that error into your program.  1. Create a function to handle the delete,this can be about deleting blog post or anything depending on your project  2. Remove unnecessary code,If you have a button with the `handleDelete` Function but you don't use it simply remove it into your code to make code look clean and concise.    - Note that undefined error it means that a functionality you have implemented is unknown so you need to add that functionality which is undefined into your project or remove it."},{"location":"tools/","title":"React Tools","text":"<ul> <li>Into this section we will see the list of react tools for solving react errors</li> </ul>"},{"location":"tools/#introduction","title":"Introduction","text":"<ul> <li>There are several tools available to help developers diagnose and solve errors in React applications, ranging from browser developer tools to specialized libraries and frameworks. Here are some examples:</li> </ul>"},{"location":"tools/#browser-developer-tools","title":"Browser Developer Tools","text":"<ul> <li> <p>Chrome DevTools: A suite of debugging tools built into the Chrome browser, including a JavaScript debugger, performance profiler, and DOM inspector.</p> </li> <li> <p>Firefox Developer Tools: Similar to Chrome DevTools, Firefox Developer Tools provide debugging, profiling, and inspection capabilities.</p> </li> <li> <p>React DevTools: A browser extension available for Chrome and Firefox that allows developers to inspect React component hierarchies, view component props and state, and track component updates.</p> </li> <li> <p>React Developer Tools in React Native Debugger: A specialized debugger for React Native applications that includes React DevTools integration and additional debugging features specific to React Native.</p> </li> </ul>"},{"location":"tools/#react-developer-tools","title":"React Developer Tools","text":""},{"location":"tools/#error-reporting-and-monitoring","title":"Error Reporting and Monitoring","text":"<ul> <li> <p>Sentry: A platform for monitoring and reporting errors in web and mobile applications. Sentry provides real-time error tracking, release monitoring, and performance metrics.</p> </li> <li> <p>Rollbar: Similar to Sentry, Rollbar offers error tracking and monitoring for web and mobile applications, with features like real-time alerts and automated error grouping.</p> </li> <li> <p>Bugsnag: Another error monitoring platform that provides real-time error reporting, stability scores, and crash analytics to help developers identify and prioritize bugs.</p> </li> </ul>"},{"location":"tools/#testing-and-static-analysis","title":"Testing and Static Analysis","text":"<ul> <li> <p>Jest: A popular JavaScript testing framework for unit and integration testing. Jest includes features like snapshot testing, mocking, and code coverage reporting, making it well-suited for testing React components and applications.</p> </li> <li> <p>React Testing Library: A testing utility for React applications that encourages writing tests from the user's perspective. React Testing Library provides APIs for interacting with React components in tests and encourages writing tests that focus on user behavior rather than implementation details.</p> </li> <li> <p>ESLint: A widely used static analysis tool for JavaScript code. ESLint can help identify potential errors, enforce coding standards, and improve code quality in React applications by detecting common mistakes and enforcing best practices.</p> </li> </ul>"},{"location":"tools/#state-management","title":"State Management","text":"<ul> <li> <p>Redux DevTools: A browser extension for debugging Redux applications. Redux DevTools allows developers to inspect Redux stores, track state changes, and replay actions for easier debugging and development.</p> </li> <li> <p>MobX DevTools: Similar to Redux DevTools, MobX DevTools provide debugging capabilities for MobX-powered applications. Developers can inspect MobX stores, track observables, and visualize state changes in real-time.</p> </li> </ul>"},{"location":"warning/","title":"Warning","text":"<ul> <li> <p>unused variables (no-unused-vars)</p> </li> <li> <p>In this section we will take a look into errors which are happening into react application are not errors but they exist to warn use that sometning is wrong as a time.</p> </li> </ul>"},{"location":"warning/#unused-variables-no-unused-vars","title":"unused variables (no-unused-vars)","text":"<ul> <li> <p>unused variables are type of errors which occurs in react when you create a variable or function, object, array for a certain things but you have not used it into your program.</p> </li> <li> <p>It is like you have allocated a memory to store a certain object, variable, function, array but you have not used it.Example:</p> </li> </ul> <pre><code>import { useState } from \"react\";\n\nconst Login = () =&gt; {\n    const [userName, setUserName] = useState(\"\")\n    const [password, setPassword] = useState(\"\")\n\n\n    return (\n        &lt;div&gt;\n            &lt;form className=\"container\"&gt;\n                &lt;div className=\"mb-3\"&gt;\n                    &lt;label for=\"exampleInputEmail1\" className=\"form-label\"&gt;Email address&lt;/label&gt;\n                    &lt;input type=\"email\" className=\"form-control\" id=\"exampleInputEmail1\" aria-describedby=\"emailHelp\"  value={userName} onChange={handleUsernameChange}/&gt;\n                &lt;/div&gt;\n            &lt;/form&gt;\n        &lt;/div&gt;\n    );\n}\n\nexport default Login;\n</code></pre>"},{"location":"warning/#attribute-in-khebab-case","title":"Attribute In Khebab Case","text":"<ul> <li>This occurs most into a program when react is rendering react component due to the use of khebab case for the react components, JavaScript which are in khebab case to solve this error you have to change thenm into a a camel case.</li> </ul> <pre><code>// warning\nWarning: Invalid DOM property `stroke-linecap`. Did you mean `strokeLinecap`?\n    at path\n    at svg\n    at a\n    at li\n    at ul\n    at nav\n    at div\n    at div\n    at Navbar\n    at div\n    at App\n\n- Warning: Invalid DOM property `stroke-linejoin`. Did you mean `strokeLinejoin`?\n\n- Warning: Invalid DOM property `stroke-width`. Did you mean `strokeWidth`?\n</code></pre> <pre><code>// solution\n</code></pre>"}]}